user www-data;

#set up pid path.
pid /var/run/new_nginx.pid;
#scale worker process.
worker_processes auto;

#load module rotate image
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events{
    #connect other worker process when limit 1024.
    worker_connections 1024;
}

#setup error log.
error_log /var/log/nginx/error.log warn;

http{
    #include content-type file    
    include  /etc/nginx/mime.types;  

    #Not show Nginx Version
    server_tokens off;

    #define limit zone
    # limit_req_zone $request_uri zone=MYZONE:10m rate=1r/s; 

    #Configure microcache (fastcgi)
    # fastcgi_cache_path /tmp/nginx_cache levels=1:2  keys_zone=ZONE_1:100m inactive=60m;
    #scheme https://
    #$request_method GET POST PUT DELETE
    #$host Domain.com
    #$request_uri sub Domain ex. /blog/articel 
    # fastcgi_cache_key "$scheme$request_method$host$request_uri";
    # add_header X-Cache $upstream_cache_status;

    #setup access log,    
    access_log /var/log/nginx/access.log;

    #gzip compresssed reponese file.
    # gzip on;
    # gzip_comp_level 3;
    # gzip_types text/css textjavascript;


    #Redirect all traffic to https
    server{
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    server {
    #port  
    # listen 80;
    listen 443 ssl http2;
    #servernam or ip
    server_name localhost;
    #root dirctory    
    root /usr/share/nginx/html;   
    #index path
    index index.html;  

    #not allow another web site access with iframe
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    #ssl path
    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    #Disable SSL
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2;
    #Optimise cipher suits
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    #Enable DH Params
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    #Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000" always;
    #ssl sesssion
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;

    #server push
    # location = /index.html {
    #     http2_push /style.css;
    #     http2_push /thumb.png;
    # }

    #Cache by default
    # set $no_cache 0;

    #Cehck for cache bypass
    # if ($arg_skipcache = 1){
    #     set $no_cache 1;
    # }

    location / {
        #limit req zone
        # limit_req zone=MYZONE burst=5 nodelay;

        #Authen
        # auth_basic "Secure Area";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        #Not Found.
        try_files $uri $uri/ = 404;
    }
    #php file
    location ~\.php$ {
        #pass php request to the php-fpm service (fastcgi)
        # try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass web:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        #fastCgi cache
        # fastcgi_cache ZONE_1;
        # fastcgi_cache_valid 200 60m;  
        # fastcgi_cache_valid 404 10m;   
        # fastcgi_cache_bypass $no_cache;
        #skip cache
        # fastcgi_no_cache $no_cache;
    }

    #Prefix match 
    # location /greet {
    #     return 200 'hello from nginx "greet" location ';
    # }

    #Exact match 
    # location = /greet {
    #     return 200 'hello from nginx "greet" location - Exact Match';
    # }

    # #REGEX match case sensitive
    # location  ~ /greet[0-9] {
    #     return 200 'hello from nginx "greet" location - Exact Match';
    # }

    # #REGEX match case insensitive
    # location  ~* /greet[0-9] {
    #     return 200 'hello from nginx "greet" location - Exact Match Sensitive ';
    # }

    #Prefertial match case insensitive
    # location  ^~ /Greet2 {
    #     return 200 'hello from nginx "greet" location - Prefertial Match  ';
    # }

    #variable 
    # location /inspect {
    #     return 200 "$host\n$uri\n$args";
    # }

    #Use condition statement.
    # if ( $arg_apikey != 1234 ) {
    #     return 401 "Incorrect Api Key";
    # }

    #declare variable
    # set $weekend 'No';
    # if ( $date_local ~ 'Saturday|Sunday' ){
    #     set $weekend 'Yes';
    # }
    # location /is_weekend {
    #     return 200 $weekend;
    # }

    #argument spesific name as query string.
    # location /inspect {
    #     return 200 "Name: $arg_name";
    # }

    #redirect
    # location /logo {
    #     return 307 /thumb.png;
    # }

    #rewrite
    # rewrite ^/user/\w+ /greet;
    # location /greet {
    #     return 200 "hello";
    # }   

    #try files and name location
    # try_files $uri /cat.png /greet @friendly_404;
    # location /greet {
    #     return 200 "hello";
    # }  
    # location @friendly_404 {
    #     return 404 "Sorry,that file could not be found.";
    # }

    #rotate image picture.
    # location = /thumb.png {
    #     image_filter rotate 180;
    # }

    #gzip implement
    # location ~* \.(css|js|jpg|png)$ {
    #     access_log off;
    #     add_header my_header "Hello World";
    #     add_header Pragma public;
    #     add_header Vary Accept-Encoding;
    #     expires 1M;
    # }

    }
}